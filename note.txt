import { Component } from '@angular/core';

@Component({
  selector: 'my-app',
  template: `<h1>Maya {{name}}</h1>`,
})
export class AppComponent  { name = 'Corporation'; }


export: allows to be exported


a component: template+class+decorator

template and templateurl

we can not use intelligense here.

inline code does not understand..

templateurl use for pointing external template file. 

templateUrl:'app/app.component.html'
-- it is formattable.


nesting angular component

- reusable ui widget

less then 3 lines then use inline. 

else separate html file.


root / nested component 

AppModule bootstrap the login

ngmodule: add metadata


appcomponent----component
appmodule--ngmodule


property binding...

{{10+20}}

termnary expression 
interpolation
property binding

both same:
<img src='{{imagePath}}'>
is same as <img [src] = 'imagePath'>


   <button [disabled] = 'isDisabled'>Click me</button>


//in class 
isDisabled: boolean = true


--------
property binding
 - square bracket
 <span [innerHtml]='pageHeader'></span>
or canonical binidng
 <span bind-innerHtml='pageHeader'></span>

html attribute and dom property


dom:
windows
document
html
head, body
title  script  div
                 h1

button disabled here disabled is attribute of  of html5 button object

max, maxlength,min, required readonly, pattern, step, value

property can change, value can't



angular attribute binding
 <th [attr.colspan]="colspan">
            Employee Details
        </th>



two ways of attribute binding: 

<th [attr.colspan]="colspan">

 <span [innerHtml]='pageHeader'></span


bindingComponent class

import {Component} from "@angular/core"

@Component({
    selector: 'my-app',
    template: `
    <div>
        <h1>{{getFullMethod()}}</h1>
        <img [src]='imagePath'/><br/><br/><br/> 
         <my-employee></my-employee>
    </div>
`
})
export class AppComponent {
    pageHeader: string = "Employee Details";
    imagePath: string = 'https://paloimages.prothom-alo.com/contents/themes/public/style/images/Prothom-Alo.png';
    isDisabled: boolean = false;
    firstName: string = 'Tom';
    lastName: string = 'Hopkins';
   
    getFullMethod(): string {
        return this.firstName + ' ' + this.lastName;
    }
}

--
/*table {
    color: #369;
    font-family: Arial, Helvetica, sans-serif;
    font-size: large;
    border-collapse: collapse;
}

td {
    border: 1px solid black;
}body {
}*/


-----------------

import {Component} from "@angular/core"

@Component({
    selector: 'my-app',
    template: `
  <button class="colorClass" [class] ='classestoapply'>MyButton</button><br/>

  <button class="colorClass" [class.boldClass]='applyBoldClass'>MyButton2</button>
`
})
export class AppComponent {
    isDisabled: boolean = false;
    classestoapply: string = "italicClass boldClass";
    applyBoldClass: boolean = true;
    
}

---------------------------
import {Component} from "@angular/core"

@Component({
    selector: 'my-app',
    template: `
  <button class="colorClass" [class] ='classestoapply'>MyButton</button><br/>

  <button class="colorClass" [class.boldClass]='!applyBoldClass'>MyButton2</button>
`
})
export class AppComponent {
    isDisabled: boolean = false;
    classestoapply: string = "italicClass boldClass";
    applyBoldClass: boolean = false;
    
}


import {Component} from "@angular/core"

@Component({
    selector: 'my-app',
    template: `
  <button class="colorClass" [class] ='classestoapply'>MyButton</button><br/>

  <button class="colorClass" [class.boldClass]='!applyBoldClass'>MyButton2</button>

   <br>
  <button class="colorClass" [ngClass]='addClasses()'>MyButton3</button>

`
})
export class AppComponent {
    isDisabled: boolean = false;
    classestoapply: string = "italicClass boldClass";
    applyBoldClass: boolean = true;
    applyItalicClass: boolean = true;

    addClasses() {
        let classes = {
            boldClass: this.applyBoldClass,
            italicClass: this.applyItalicClass
        };
        return classes;
    }
    
}
--------------------
style binding in angular 2

import {Component} from "@angular/core"

@Component({
    selector: 'my-app',
    template: `
  <button style='color:red' [style.font-weight]="isBold ? 'bold': 
'normal'">MyButton</button><br/>

  

`
})
export class AppComponent {
    isBold: boolean = true;
    
}


-----------
import {Component} from "@angular/core"

@Component({
    selector: 'my-app',
    template: `
  <button style='color:red' [style.font-weight]="isBold ? 'bold': 'normal'">MyButton</button><br/>
<br/><br/> 
 <button style='color:red' [style.font-size.px]="fontsize ? 'bold': 'normal'">MyButton 2</button><br/>

  

`
})
export class AppComponent {
    isBold: boolean = true;
    fontsize: number = 30;
    
}

---------------
for multiple variable condition in style settings we can use methods.


let is like var


multiple attribute set on control:
import {Component} from "@angular/core"

@Component({
    selector: 'my-app',
    template: `
  <button style='color:red' [style.font-weight]="isBold ? 'bold': 'normal'">MyButton</button><br/>
<br/><br/> 
 <button style='color:red' [style.font-size.px]="fontsize ? 'bold': 'normal'">MyButton 2</button><br/>
<br/><br/><br/> 
<button style='color:red' [ngStyle]="addStyles()">MyButton 3</button><br/>

  

`
})
export class AppComponent {
    isBold: boolean = true;
    fontsize: number = 30;
    isItalic: boolean = true;

    addStyles() {
        let styles = {
            'font-size.px': this.fontsize,
            'font-style': this.isItalic ? 'italic' : 'normal',
            'font-weight': this.isBold ? 'bold': 'normal'
        }

        return styles;

    }
    
}

import {Component} from "@angular/core"

@Component({
    selector: 'my-app',
    template: `
  <button style='color:red' [style.font-weight]="isBold ? 'bold': 'normal'">MyButton</button><br/>
<br/><br/> 
 <button style='color:red' [style.font-size.px]="fontsize ? 'bold': 'normal'">MyButton 2</button><br/>
<br/><br/><br/> 
<button style='color:red' [ngStyle]="addStyles()">MyButton 3</button><br/>

  

`
})
export class AppComponent {
    isBold: boolean = true;
    fontsize: number = 30;
    isItalic: boolean = true;

    addStyles() {
        let styles = {
            'font-size.px': this.fontsize,
            'font-style': this.isItalic ? 'italic' : 'normal',
            'font-weight': this.isBold ? 'bold': 'normal'
        }

        return styles;

    }
    
}

------------------
ANGULAR EVENT BINDING
INTERPOLATION
PROPERTY BINDING
ATTRIBUTE BINDING
CLASS BINDING
canonical form



create file: 
https://www.youtube.com/watch?v=C8JcGqQdcPI

show details

call another ts file from app.component:
import {Component} from "@angular/core"

@Component({
    selector: 'my-app',

    template: `
               <div>
                          
                         <my-employee></my-employee>
              </div>

`
})
export class AppComponent {
   onClick(): void {

       console.log('button click');
   }
    
}


---------------

<tr *nglf='showDetails'></tr>
//structural directives 


this directive will work on row to add or delete data based on the data


there are different directives like *ngIf 

when shodetails false, ngif will hide tr

------------
import {Component} from "@angular/core"

@Component({
    selector: 'my-app',

    template: `
               <div>
                          
                         <my-employee></my-employee>
              </div>

`
})
export class AppComponent {
   onClick(): void {

       console.log('button click');
   }
    
}

import { Component } from '@angular/core'

@Component({

    selector: 'my-employee',
    templateUrl: 'app/employee/employee.component.html'
})

export class EmployeeComponent {
    firstName: string = 'Tom';
    lastName: string = 'Hopkins';
    gender: string = 'Male';
    age: number = 20;
    colspan: number = 2;

    showDetails: boolean = false;

    toggleDetails(): void {
        this.showDetails = !this.showDetails;
    }
}


<table >
    
    <thead>

    </thead>
    
    <tr>
             
        <th [attr.colspan]="colspan">
            Employee Details
        </th>
    </tr>
    <tbody>
    
    <tr>
        <td border="2 px">First Name</td>
        <td>{{firstName}}</td>
    </tr>
    <tr>
        <td>Last Name</td>
        <td>{{lastName}}</td>
    </tr>
    <tr *ngIf="showDetails">
        <td>Gender</td>
        <td>{{gender}}</td>
    </tr>
    <tr *ngIf ="showDetails">
        <td>Age</td>
        <td>{{age}}</td>
    </tr>
    </tbody>
    
</table>

<button (click)="toggleDetails()">
    {{showDetails ? 'Hide': 'Show'}} Details
</button>
----------


Two way data binding

as type, update other one. 

import {Component} from "@angular/core"
@Component({
    selector: 'my-app',
    template: `
               Name: <input [value] = 'name' (input)='name=$event.target.value'/>
                <br/>
                You entered: {{name}}

`})
export class AppComponent {

    name: string = 'Tom';
}

----------------
2 way binding 

import {Component} from "@angular/core"
@
Component({
    selector: 'my-app',
    template: `
               Name: <input [(ngModel)] = 'name '/>
                <br/>
                You entered: {{name}}

`
})
export class AppComponent {

    name: string = 'Tom';
}

--------------------------------------
ngFor for trackby .. not to create same object in refresh

why? to iterate the list
ngfor is bad for largelist 

if don't have type then, put any
e.g. employee: any


Angular ngFor trackBy


trackby keeps record of unchange objects. 

trackby improves performance, it also helps to identify collection index


-------------------
Angular pipes
Built in pipes include lowercase, uppercase, decimal, date, percent, currency etc
document:
https://angular.io/api/common/DatePipe

transform data before display
chain pipe
parameter by colon

custom pipes

angular.io/pipes

Customer pipe
--------------------------

3 steps: 
create class
declare custom pipe
update html binding and logic in the pipe


nested component, container component
eventemitter
ng-container 

-- parent component will send those information to child component

#of male, #of female


== or === ?

== compare two values
=== compare two values & their types



Error: node_module is not creating!
sol: remove the lock file from the project where the package.json stays and rebuild. 


bind one ngfor in one element
you can use: 
<ng-container></ng-container>


---------------------
Interface in Angular 2

business class: 
employee, customer, order, Transaction

Typescript is strongly typed
meaning 

employee: any[]//this is not strongly typed
employee: []employee//strongly typed

in this case we don't get intellisense

Tips: compile time error better than runtime

strong type helps to find typo error

shortthand to remove code: 

we can directly assigning in the constructor using the modifier

export class Employee implements IEmployee {
    
    constructor(public code: string, public name: string, public gender: string,
        public annualSalary: number, public dateOfBirth: string) {

        this.code = code;
        this.name = name;
        this.gender = gender;
        this.annualSalary = annualSalary;
        this.dateOfBirth = dateOfBirth;
    }

     
}


some angular interface does not need I 

don't require access modifier; public by default, otheriwse error 

no js code create for interface when transpiling


Angular component lifecycle hooks


angular life cycle hooks

to tap into and react when these life cycle events occur, angualr offer serveral lifecycle hooks.

create component
render component
creaets and render the component child
check component events 
destroy component before removing it from the DOM

ngOnChange
ngOnInit
ngDoCheck
 ngAfterContentInit
 ngAfterContenChecked
 ngAfterViewInit
 ngAfterViewChecked
ngOnDestroy


most common: ngOnChange, ngOnInit, ngOnDestroy

step1: import life cycle hook interface

step 2: make the component class implement the hook interface

step 3: write implemnetation code for the interface method


ngOnInit:


it is better to implement onChanges during lifecycle hook. 

--------------------
Angular Service Tutorial

why we need a service, 
creating service,
inject and useing service
difference between constructor and ngOnInit



service: when we need data from multiple component. reuse.

in angular: service is nothing but a class

@Injectable decorator recommended whether dependency or not.


when we passing the data using constructor from one service, then we can easily construct demo 
- this is one kind of dependency injection. 

service needs to register 

[] meaning it is an array of data

a provider should be added in the receiver  class to receive from multiple services. 

//service can also be available at an module level. 


--Angular services tutorial

we should not put service in the constructor; 
ngOnInit is the right place of service hook

ngOnInit life cycle hook which call after the constructor, use to fetch data from remote data or time consuming service.

this is angular dependency 

----------------

asp.net web api service to retrieve 


sql data: Create Database EmployeeDB
Go

Use EmployeeDB
Go

Create table Employees
(
     code nvarchar(50) primary key,
     name nvarchar(50),
     gender nvarchar(50),
     annualSalary decimal(18,3),
     dateOfBirth nvarchar(50)
)
Go

Insert into Employees values ('emp101', 'Tom', 'Male', 5500, '6/25/1988')
Insert into Employees values ('emp102', 'Alex', 'Male', 5700.95, '9/6/1982')
Insert into Employees values ('emp103', 'Mike', 'Male', 5900, '12/8/1979')
Insert into Employees values ('emp104', 'Mary', 'Female', 6500.826, '10/14/1980')
Insert into Employees values ('emp105', 'Nancy', 'Female', 6700.826, '12/15/1982')
Insert into Employees values ('emp106', 'Steve', 'Male', 7700.481, '11/18/1979')



*****wikibuy: app to search cheapest item and plug in the amazon 

EmployeeDBEntity from the entity framework database first provides us the entity data. 


###To access the services through the browser in webapi,

select project, right click, select view, view in chrmoe, 

browse: http://localhost:54677/api/employees

link: 
http://localhost:54677/api/employees/emp102
this will work if: we replace id with code in webapiconfig in appstart folder

  routeTemplate: "api/{controller}/{code}",

--------------------
Angular 2 http service tutorial


 angular http service to call webapi
 
 observable pattern
 
 
 
 steps to call from angular: 
 
step 1: call import { HttpModule } from '@angular/http';
from appmodule.

step 2: modify emploeeservice to issue GET request using the built in http service

 constructor(private _http: Http){}//
   here _http private field created and updated in the constructor whcih can be used later. this is shorthand notation in angular. 
   
   
   observabel: asnych pattern
   
   where 
   
   
   
   step3: from EmployeeListComponent, subscrib to the observable returned by angular employeeSErvice
   
   who will subscribe the employeeservice in angular they/all those subscriber can get the service.
   
   
   this.employee inngOnInit will return the observable. this observable is directly connected with the webapi service through service link
   
   Callback methods;
   onNext,
   onError,
   OnCompleted
   
   
   
   two proejcts different port can not work
   
   for security reasons 
   
   part 47: cross sharing and browsing
   
   - to access crosss domain, we need to update webconfig file customheader in system.webserver
   
   loading employee please wait..
   


 <tr *ngIf="!employees">
        <td colspan="5">
            Loading data. Please wait...
        </td>
    </tr>
	
	//here loading data status... during loading.. 


-----------------
error handling http

how to make artificial service error?
create mistake in the link..

--------------
use bootstrap in angular

goto project folder in cmd and type the following: 
npm bootstrap@3 jquery --save

-- show all files only appear in project level not solution level.


if lock file does not allow to to install from vs; then open nodejs and install as admin using command

npm bootstrap@3 jquery --save

--------
all the component will show up if the project e.g. bootstrap folder is included in the project. 


content, script, fonts -> bootstrap from nuget


nuget only removes which are installed by itself. 

you can use cdn or nuget or npm

---------------
basic of routing: 
one view to another view

any comonent which is .ts file
should be registed in moduler component. 

notice both homecomponent and pagenotfoiundcomponetn don't have selector component. selector component only in the employee component. 

Routing
step 1: set <base href="/href/">

step 2: import RouteModule and define routes in app.modules

route order is important. first routes match wins. this way ** wild card should be at the end. BEcuase wild card matches with every route.


step 3: update app.componetn.ts with menu and link

step 4: in web.conf include the following url-rewrite rule

add router-outlet in app.component. 

//if connection refused for webservice; 
if local project then you need to run the service by viewing the service page. 

style the active tab using bootstrap 



//what configuration to you; angular docuemntation needs to follow for web.config file.

based on different server.

without this rewrite rule, back things will not work as expected. 

html file style route

has style route, in appmodule, useHash: true
in usehash, rewrite is not required.



 #
 
 -----------------
 Angular routing parameter; 
 
 passing parameter through the router
 
 notification message and do it for the user
 
 code then details will 
 
 
 
 
 /:code
 
 
 step 1: CREATE THE ROUTE WITH A PARAMETER
 
 step 2: bind to the route using [routerLink] directive. In the binding we are using link parameter array.
 
 step 3: 

 
 why singletone
 
 ad css
 
 
 Singleton in Angular ? why its important?

in chrome: if page does not detect update html or load from cache; do this:
- Hit F12 in your browser to bring up the Developer Tools. Disable the Cache from network tab. Reload your page



*ngif for binding the collection

rewrite rules will only need in html routing not useHash


app.component.ts - will contain all menu

thier coreesponindg pages (component page ; ts) should responsible their own duty. 


Dependency injection implement angular in angular: 

EmployeeService : we do not instantiate but passing the new object through constructor parameter.


who is creating the constructor: 
  @injector //angular injector
  
  we register into angular injector
  
  in component or moduler level
  
  for angualr injector module becomes dependency free
  
  why DI?
  
coupled code

a class can not share same piece of functionality if the piece of code are not unique and dependent.

it is hard to maintain in unit test

any time parts change , main code also needs to change, which is frequesntly in large code module

difficult to maintaint

an injector maintain the dependency set who maintain the state. 

parent do not need change in child change ; this is the benefit dependency injection

In dependency injection: angular injector keeps monitoring and sharing the object for mullitple view requests


difficult to mock the object for unit testing if not have di

benefits summary: 
easy to write and maintain  overtime 

easy data and functionality

mocking easy



create singleton to share across multiple resources


by checking the console we can conclude that, injector creates only single instances of userpreferences and that is shared in both home and employee class. 


2 steps to create injector:

1. reigster in 
2. the show in constructor 


angular inejction in hierarchical level. 

it works in bubble up to find whether the moduel is injected an object.

injector can be write in module level or component level. 
In component level, we need to assign provider as same as module level.

bubbles up or not, depends on where it injected and the error will popup: not provided; even it is provided in child component level. 


register at root level will share injector to all components including root level with lazy loading. 

there are more then 1 module in real app

HR management system
root module
1. emp mod
2. dept mod
3. admin mod
4. report mod

--------
create testmodule

we can create module

## angular router service navigate() method


note: we use div to help html formating e.g. margin-top can be given on div not button control. so, put button inside div and update class/style of div. 


working on back to previous list; 
we need to use navigation. use router service/


router.navigate needs to bound in click event and attach to the html

-------------------
use
promises instead of observable

note: in exception-observable.throw (error) was used to throw back the error to the client code who calls this method and log there. 



promise vs observable


use: Promise<any> in return type instead of Promise<IEmployee>







































